{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.22.6.54827",
      "templateHash": "5630682332789189521"
    }
  },
  "parameters": {
    "spokeSubscriptionId": {
      "type": "string",
      "metadata": {
        "description": "Required. Subscription GUID."
      }
    },
    "hubSubscriptionId": {
      "type": "string",
      "metadata": {
        "description": "Required. Subscription GUID."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Required. ResourceGroup location."
      }
    },
    "azureFirewallName": {
      "type": "string",
      "metadata": {
        "description": "Required. Azure Firewall Name."
      }
    },
    "hubResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Required. ResourceGroup Name."
      }
    },
    "spokeResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Required. ResourceGroup Name."
      }
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "Required. Creating UTC for deployments."
      }
    },
    "vNetAddressPrefixes": {
      "type": "array",
      "metadata": {
        "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
      }
    },
    "aseSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Required. The Address Prefix of ASE."
      }
    },
    "appGwSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Required. The Address Prefix of AppGw."
      }
    },
    "managementVirtualMachineSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Required. The Address Prefix of AppGw."
      }
    },
    "hubVirtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Required. Exisisting Virtual Network Name for Peering."
      }
    },
    "dnsZoneName": {
      "type": "string",
      "metadata": {
        "description": "Optional:Global DNS Zone Name"
      }
    },
    "capacity": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 32,
      "metadata": {
        "description": "Capacity (instance count) of application gateway"
      }
    },
    "autoScaleMaxCapacity": {
      "type": "int",
      "defaultValue": 10,
      "minValue": 1,
      "maxValue": 32,
      "metadata": {
        "description": "Autoscale capacity (instance count) of application gateway"
      }
    },
    "applicationGatewaySslCertificateName": {
      "type": "string"
    },
    "applicationGatewaySslCertificateFilename": {
      "type": "string"
    },
    "env": {
      "type": "string",
      "defaultValue": "development",
      "allowedValues": [
        "development",
        "test",
        "staging",
        "production"
      ]
    },
    "function": {
      "type": "string",
      "defaultValue": "app"
    },
    "index": {
      "type": "int",
      "defaultValue": 5
    },
    "appName": {
      "type": "string",
      "defaultValue": "tier3"
    },
    "applicationGatewaySslCertificatePassword": {
      "type": "securestring",
      "metadata": {
        "description": "The certificate password value."
      }
    },
    "localAdministratorPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The local administrator password of the management virtual machine."
      }
    },
    "hubStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Hub storage account where certificate artifacts are uploaded."
      }
    },
    "hubStorageAccountContainerName": {
      "type": "string",
      "metadata": {
        "description": "Hub storage account container where certificate artifacts are uploaded."
      }
    }
  },
  "variables": {
    "networkSecurityGroupSecurityRules": [
      {
        "name": "Port_443",
        "properties": {
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "443",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": "100",
          "direction": "Inbound",
          "sourcePortRanges": [],
          "destinationPortRanges": [],
          "sourceAddressPrefixes": [],
          "destinationAddressPrefixes": []
        }
      },
      {
        "name": "Application_Gateway_Traffic",
        "properties": {
          "protocol": "*",
          "sourcePortRange": "*",
          "destinationPortRange": "65200-65535",
          "sourceAddressPrefix": "*",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": "101",
          "direction": "Inbound",
          "sourcePortRanges": [],
          "destinationPortRanges": [],
          "sourceAddressPrefixes": [],
          "destinationAddressPrefixes": []
        }
      }
    ],
    "webApplicationFirewall": {
      "enabled": true,
      "firewallMode": "Detection",
      "ruleSetType": "OWASP",
      "ruleSetVersion": "3.2",
      "disabledRuleGroups": [],
      "exclusions": [],
      "requestBodyCheck": true,
      "maxRequestBodySizeInKb": 128,
      "fileUploadLimitInMb": 100
    },
    "http2Enabled": true,
    "aseKind": "ASEV3",
    "aseLbMode": "Web, Publishing",
    "disableBgpRoutePropagation": true,
    "port": 443,
    "privateIPAllocationMethod": "Dynamic",
    "protocol": "Https",
    "cookieBasedAffinity": "Disabled",
    "hostnames": [
      "[format('*.{0}', parameters('dnsZoneName'))]"
    ],
    "pickHostNameFromBackendAddress": true,
    "requestTimeout": 20,
    "requireServerNameIndication": true,
    "publicIpSku": "Standard",
    "publicIPAllocationMethod": "Static",
    "localAdministratorName": "xadmin",
    "requestRoutingRuleType": "Basic",
    "sku": "WAF_v2",
    "tier": "WAF_v2"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "name": {
            "value": "[parameters('spokeResourceGroup')]"
          },
          "tags": {
            "value": {}
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "13278280248854850961"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/resourceGroups",
              "apiVersion": "2019-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('spokeResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appName": {
            "value": "[parameters('appName')]"
          },
          "deploymentNameSuffix": {
            "value": "[parameters('deploymentNameSuffix')]"
          },
          "environment": {
            "value": "[parameters('env')]"
          },
          "function": {
            "value": "[parameters('function')]"
          },
          "index": {
            "value": "[parameters('index')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "11198729082795191910"
            }
          },
          "parameters": {
            "appName": {
              "type": "string",
              "maxLength": 8
            },
            "deploymentNameSuffix": {
              "type": "string"
            },
            "environment": {
              "type": "string",
              "allowedValues": [
                "development",
                "test",
                "staging",
                "production"
              ]
            },
            "function": {
              "type": "string"
            },
            "index": {
              "type": "int"
            }
          },
          "variables": {
            "dbNamePlaceHolder": "[format('db{0}{1}{2}{3}', parameters('appName'), variables('environmentLetter'), variables('functionShort'), padLeft(parameters('index'), 2, '0'))]",
            "environmentLetter": "[substring(parameters('environment'), 0, 1)]",
            "functionShort": "[if(greater(length(parameters('function')), 5), substring(parameters('function'), 0, 5), parameters('function'))]",
            "managementVirtualMachineNamePlaceHolder": "[take(format('[PH]-{0}', uniqueString(parameters('deploymentNameSuffix'))), 15)]",
            "networkSecurityGroupNamePlaceHolder": "[format('nsg-{0}{1}{2}{3}', parameters('appName'), variables('environmentLetter'), variables('functionShort'), padLeft(parameters('index'), 2, '0'))]",
            "resourceNamePlaceHolder": "[format('[PH]-{0}-{1}-{2}-{3}', parameters('function'), parameters('appName'), variables('environmentLetter'), padLeft(parameters('index'), 2, '0'))]",
            "resourceNameShortPlaceHolder": "[format('[PH]-{0}-{1}-{2}-{3}', variables('functionShort'), parameters('appName'), variables('environmentLetter'), padLeft(parameters('index'), 2, '0'))]",
            "storageAccountNamePlaceHolder": "[format('sta{0}{1}{2}{3}', parameters('appName'), variables('environmentLetter'), variables('functionShort'), padLeft(parameters('index'), 2, '0'))]"
          },
          "resources": [],
          "outputs": {
            "dbName": {
              "type": "string",
              "value": "[variables('dbNamePlaceHolder')]"
            },
            "networkSecurityGroupName": {
              "type": "string",
              "value": "[variables('networkSecurityGroupNamePlaceHolder')]"
            },
            "resourceName": {
              "type": "string",
              "value": "[variables('resourceNamePlaceHolder')]"
            },
            "resourceNameShort": {
              "type": "string",
              "value": "[variables('resourceNameShortPlaceHolder')]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[variables('storageAccountNamePlaceHolder')]"
            },
            "virtualMachineName": {
              "type": "string",
              "value": "[variables('managementVirtualMachineNamePlaceHolder')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('spokeSubscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('keyvault-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('spokeResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[format('kv-{0}', uniqueString(parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "skuName": {
            "value": "standard"
          },
          "subnetResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.subnets.value[1].Id]"
          },
          "virtualNetworkId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "6467751199549507152"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "skuName": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ]
            },
            "subnetResourceId": {
              "type": "string"
            },
            "virtualNetworkId": {
              "type": "string"
            }
          },
          "variables": {
            "privateEndpointName": "[format('pe-{0}', parameters('keyVaultName'))]",
            "privateDnsName": "[format('privatelink{0}', environment().suffixes.keyvaultDns)]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "tenantId": "[subscription().tenantId]",
                "sku": {
                  "family": "A",
                  "name": "[parameters('skuName')]"
                },
                "enabledForDeployment": true,
                "enabledForTemplateDeployment": true,
                "enabledForDiskEncryption": false,
                "enableRbacAuthorization": true,
                "enableSoftDelete": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Deny",
                  "ipRules": [],
                  "virtualNetworkRules": []
                },
                "publicNetworkAccess": "Disabled"
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-05-01",
              "name": "[variables('privateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[variables('privateEndpointName')]",
                    "id": "[resourceId('Microsoft.Network/privateEndpoints/privateLinkServiceConnections', variables('privateEndpointName'), variables('privateEndpointName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                      "groupIds": [
                        "vault"
                      ]
                    }
                  }
                ],
                "customNetworkInterfaceName": "[format('nic-{0}', parameters('keyVaultName'))]",
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[replace(variables('privateDnsName'), 'vault', 'vaultcore')]",
              "location": "global"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', replace(variables('privateDnsName'), 'vault', 'vaultcore'), 'vnetLink')]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[parameters('virtualNetworkId')]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', replace(variables('privateDnsName'), 'vault', 'vaultcore'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', variables('privateEndpointName'), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "privatelink-azure-automation-net",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', replace(variables('privateDnsName'), 'vault', 'vaultcore'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', replace(variables('privateDnsName'), 'vault', 'vaultcore'))]",
                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointName'))]"
              ]
            }
          ],
          "outputs": {
            "keyVaultName": {
              "type": "string",
              "value": "[parameters('keyVaultName')]"
            },
            "keyVaultResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('spokeSubscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('mgmt-vm-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('spokeResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationGatewaySslCertificateFilename": {
            "value": "[parameters('applicationGatewaySslCertificateFilename')]"
          },
          "applicationGatewaySslCertificateName": {
            "value": "[parameters('applicationGatewaySslCertificateName')]"
          },
          "applicationGatewaySslCertificatePassword": {
            "value": "[parameters('applicationGatewaySslCertificatePassword')]"
          },
          "hubStorageAccountContainerName": {
            "value": "[parameters('hubStorageAccountContainerName')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
          },
          "localAdministratorPassword": {
            "value": "[parameters('localAdministratorPassword')]"
          },
          "localAdministratorUsername": {
            "value": "[variables('localAdministratorName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "hubStorageAccountName": {
            "value": "[parameters('hubStorageAccountName')]"
          },
          "subnetName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'mgmtvm-snet')]"
          },
          "userAssignedIdentityClientId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('uami-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.uamiClienId.value]"
          },
          "userAssignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('uami-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.uamiId.value]"
          },
          "userAssignedIdentityPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('uami-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.uamiPrincipalId.value]"
          },
          "virtualMachineName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualMachineName.value, '[PH]', 'vm')]"
          },
          "virtualNetworkName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'vnet')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "14768550673487364855"
            }
          },
          "parameters": {
            "applicationGatewaySslCertificateFilename": {
              "type": "string"
            },
            "applicationGatewaySslCertificateName": {
              "type": "string"
            },
            "applicationGatewaySslCertificatePassword": {
              "type": "securestring"
            },
            "hubStorageAccountContainerName": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "localAdministratorPassword": {
              "type": "securestring"
            },
            "localAdministratorUsername": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "hubStorageAccountName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "userAssignedIdentityClientId": {
              "type": "string"
            },
            "userAssignedIdentityId": {
              "type": "string"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "virtualMachineName": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2023-04-01",
              "name": "[take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 17)]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "enableAcceleratedNetworking": true,
                "enableIPForwarding": false
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2022-03-01",
              "name": "[parameters('virtualMachineName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('userAssignedIdentityId'))]": {}
                }
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "Standard_D2s_v3"
                },
                "osProfile": {
                  "computerName": "[parameters('virtualMachineName')]",
                  "adminUsername": "[parameters('localAdministratorUsername')]",
                  "adminPassword": "[parameters('localAdministratorPassword')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": true,
                    "patchSettings": {
                      "patchMode": "AutomaticByOS",
                      "assessmentMode": "ImageDefault"
                    }
                  }
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "MicrosoftWindowsServer",
                    "offer": "WindowsServer",
                    "sku": "2019-datacenter-core-g2",
                    "version": "latest"
                  },
                  "osDisk": {
                    "caching": "ReadWrite",
                    "createOption": "FromImage",
                    "deleteOption": "Delete",
                    "managedDisk": {
                      "storageAccountType": "Premium_LRS"
                    },
                    "osType": "Windows"
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 17))]",
                      "properties": {
                        "deleteOption": "Delete"
                      }
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": false
                  }
                },
                "securityProfile": {
                  "uefiSettings": {
                    "secureBootEnabled": true,
                    "vTpmEnabled": true
                  },
                  "securityType": "TrustedLaunch"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', take(format('{0}-nic-{1}', parameters('virtualMachineName'), uniqueString(parameters('virtualMachineName'))), 17))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'runCommandAppModules')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "ContainerName",
                    "value": "[parameters('hubStorageAccountContainerName')]"
                  },
                  {
                    "name": "StorageAccountName",
                    "value": "[parameters('hubStorageAccountName')]"
                  },
                  {
                    "name": "StorageEndpoint",
                    "value": "[environment().suffixes.storage]"
                  },
                  {
                    "name": "UserAssignedIdentityObjectId",
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  }
                ],
                "source": {
                  "script": "        param(\r\n          [string]$ContainerName,\r\n          [string]$StorageAccountName,\r\n          [string]$StorageEndpoint,\r\n          [string]$UserAssignedIdentityObjectId\r\n        )\r\n        $ErrorActionPreference = \"Stop\"\r\n        $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n        $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n        $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n        $BlobNames = @('az.accounts.2.13.0.nupkg','az.automation.1.9.0.nupkg','az.keyvault.4.11.0.nupkg','az.resources.6.6.0.nupkg')\r\n        foreach($BlobName in $BlobNames)\r\n        {\r\n          do\r\n          {\r\n              try\r\n              {\r\n                  Write-Output \"Download Attempt $i\"\r\n                  Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$BlobName\" -OutFile \"$env:windir\\temp\\$BlobName\"\r\n              }\r\n              catch [System.Net.WebException]\r\n              {\r\n                  Start-Sleep -Seconds 60\r\n                  $i++\r\n                  if($i -gt 10){throw}\r\n                  continue\r\n              }\r\n              catch\r\n              {\r\n                  $Output = $_ | select *\r\n                  Write-Output $Output\r\n                  throw\r\n              }\r\n          }\r\n          until(Test-Path -Path $env:windir\\temp\\$BlobName)\r\n          Start-Sleep -Seconds 5\r\n          Unblock-File -Path $env:windir\\temp\\$BlobName\r\n          $BlobZipName = $Blobname.Replace('nupkg','zip')\r\n          Rename-Item -Path $env:windir\\temp\\$BlobName -NewName $BlobZipName\r\n          $BlobNameArray = $BlobName.Split('.')\r\n          $ModuleFolderName = $BlobNameArray[0] + '.' + $BlobNameArray[1]\r\n          $VersionFolderName = $BlobNameArray[2] + '.' + $BlobNameArray[3]+ '.' + $BlobNameArray[4]\r\n          $ModulesDirectory = \"C:\\Program Files\\WindowsPowerShell\\Modules\"\r\n          New-Item -Path $ModulesDirectory -Name $ModuleFolderName -ItemType \"Directory\" -Force\r\n          Expand-Archive -Path $env:windir\\temp\\$BlobZipName -DestinationPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\_rels\" -Force -Recurse\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\package\" -Force -Recurse\r\n          Remove-Item -LiteralPath \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\[Content_Types].xml\" -Force\r\n          Remove-Item -Path \"$ModulesDirectory\\$ModuleFolderName\\$VersionFolderName\\$ModuleFolderName.nuspec\" -Force\r\n        }\r\n        Remove-Item -Path \"$env:windir\\temp\\az*\" -Force\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/runCommands",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), 'runCommandSslCertificates')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "treatFailureAsDeploymentFailure": true,
                "asyncExecution": false,
                "parameters": [
                  {
                    "name": "StorageEndpoint",
                    "value": "[environment().suffixes.storage]"
                  },
                  {
                    "name": "UserAssignedIdentityObjectId",
                    "value": "[parameters('userAssignedIdentityPrincipalId')]"
                  },
                  {
                    "name": "ApplicationGatewaySslCertificateName",
                    "value": "[parameters('applicationGatewaySslCertificateName')]"
                  },
                  {
                    "name": "ApplicationGatewaySslCertificateFilename",
                    "value": "[parameters('applicationGatewaySslCertificateFilename')]"
                  },
                  {
                    "name": "KeyVaultName",
                    "value": "[parameters('keyVaultName')]"
                  },
                  {
                    "name": "StorageAccountName",
                    "value": "[parameters('hubStorageAccountName')]"
                  },
                  {
                    "name": "Location",
                    "value": "[parameters('location')]"
                  },
                  {
                    "name": "ContainerName",
                    "value": "[parameters('hubStorageAccountContainerName')]"
                  },
                  {
                    "name": "Environment",
                    "value": "[environment().name]"
                  },
                  {
                    "name": "UserAssignedIdentityClientId",
                    "value": "[parameters('userAssignedIdentityClientId')]"
                  }
                ],
                "protectedParameters": [
                  {
                    "name": "ApplicationGatewaySslCertificatePassword",
                    "value": "[parameters('applicationGatewaySslCertificatePassword')]"
                  }
                ],
                "source": {
                  "script": "      param(\r\n        [string]$ApplicationGatewaySslCertificateFilename,\r\n        [string]$ApplicationGatewaySslCertificateName,\r\n        [string]$ApplicationGatewaySslCertificatePassword,\r\n        [string]$ContainerName,\r\n        [string]$Environment,\r\n        [string]$KeyVaultName,\r\n        [string]$Location,\r\n        [string]$StorageAccountName,\r\n        [string]$StorageEndpoint,\r\n        [string]$UserAssignedIdentityClientId,\r\n        [string]$UserAssignedIdentityObjectId\r\n      )\r\n      $ErrorActionPreference = 'Stop'\r\n      $WarningPreference = 'SilentlyContinue'\r\n      $StorageAccountUrl = \"https://\" + $StorageAccountName + \".blob.\" + $StorageEndpoint + \"/\"\r\n      $TokenUri = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=$StorageAccountUrl&object_id=$UserAssignedIdentityObjectId\"\r\n      $AccessToken = ((Invoke-WebRequest -Headers @{Metadata=$true} -Uri $TokenUri -UseBasicParsing).Content | ConvertFrom-Json).access_token\r\n      New-Item -Path $env:windir\\temp -Name certificate  -ItemType \"directory\" -Force\r\n      Invoke-WebRequest -Headers @{\"x-ms-version\"=\"2017-11-09\"; Authorization =\"Bearer $AccessToken\"} -Uri \"$StorageAccountUrl$ContainerName/$ApplicationGatewaySslCertificateFilename\" -OutFile $env:windir\\temp\\certificate\\$ApplicationGatewaySslCertificateFilename\r\n      Set-Location -Path $env:windir\\temp\\certificate\r\n      $certificatePassword = ConvertTo-SecureString -String $applicationGatewaySslCertificatePassword -AsPlainText -Force\r\n      Import-Module Az.KeyVault\r\n      Connect-AzAccount -Identity -AccountId $UserAssignedIdentityClientId -Environment $Environment\r\n      Import-AzKeyVaultCertificate -VaultName $keyVaultName -FilePath .\\$ApplicationGatewaySslCertificateFilename -Name $ApplicationGatewaySslCertificateName -Password $certificatePassword\r\n      "
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/runCommands', parameters('virtualMachineName'), 'runCommandAppModules')]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachineName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('spokeSubscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('uami-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('udr-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('spokeResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appGwSubnetAddressPrefix": {
            "value": "[parameters('appGwSubnetAddressPrefix')]"
          },
          "aseSubnetAddressPrefix": {
            "value": "[parameters('aseSubnetAddressPrefix')]"
          },
          "azureFirewallIpAddress": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroup')), 'Microsoft.Network/azureFirewalls', parameters('azureFirewallName')), '2023-05-01').ipConfigurations[0].properties.privateIPAddress]"
          },
          "disableBgpRoutePropagation": {
            "value": "[variables('disableBgpRoutePropagation')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "udrName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'udr-gw')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "7443557016486870010"
            }
          },
          "parameters": {
            "udrName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "disableBgpRoutePropagation": {
              "type": "bool"
            },
            "appGwSubnetAddressPrefix": {
              "type": "string"
            },
            "aseSubnetAddressPrefix": {
              "type": "string"
            },
            "azureFirewallIpAddress": {
              "type": "string"
            }
          },
          "variables": {
            "routes": [
              {
                "name": "appGwRoute",
                "addressPrefix": "[parameters('appGwSubnetAddressPrefix')]",
                "hasBgpOverride": false,
                "nextHopIpAddress": "[parameters('azureFirewallIpAddress')]",
                "nextHopType": "VirtualAppliance"
              },
              {
                "name": "aseRoute",
                "addressPrefix": "[parameters('aseSubnetAddressPrefix')]",
                "hasBgpOverride": false,
                "nextHopIpAddress": "[parameters('azureFirewallIpAddress')]",
                "nextHopType": "VirtualAppliance"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2021-05-01",
              "name": "[parameters('udrName')]",
              "location": "[parameters('location')]",
              "properties": {
                "copy": [
                  {
                    "name": "routes",
                    "count": "[length(variables('routes'))]",
                    "input": {
                      "name": "[variables('routes')[copyIndex('routes')].name]",
                      "properties": {
                        "addressPrefix": "[variables('routes')[copyIndex('routes')].addressPrefix]",
                        "hasBgpOverride": "[if(contains(variables('routes')[copyIndex('routes')], 'hasBgpOverride'), variables('routes')[copyIndex('routes')].hasBgpOverride, null())]",
                        "nextHopIpAddress": "[if(contains(variables('routes')[copyIndex('routes')], 'nextHopIpAddress'), variables('routes')[copyIndex('routes')].nextHopIpAddress, null())]",
                        "nextHopType": "[variables('routes')[copyIndex('routes')].nextHopType]"
                      }
                    }
                  }
                ],
                "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('udrName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/routeTables', parameters('udrName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('spokeSubscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('uami-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('spokeResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "managedIdentityName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'mi')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "2365396729618518004"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "managedIdentityName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('managedIdentityName')]",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "uamiId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
            },
            "uamiName": {
              "type": "string",
              "value": "[parameters('managedIdentityName')]"
            },
            "uamiPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId]"
            },
            "uamiClienId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').clientId]"
            },
            "uamiTenantId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').tenantId]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('spokeSubscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('networkSecurityGroup-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('spokeResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "networkSecurityGroupName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'nsg')]"
          },
          "networkSecurityGroupSecurityRules": {
            "value": "[variables('networkSecurityGroupSecurityRules')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "13585860835119874443"
            }
          },
          "parameters": {
            "networkSecurityGroupSecurityRules": {
              "type": "array"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "networkSecurityGroupName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[parameters('networkSecurityGroupName')]",
              "location": "[parameters('location')]",
              "properties": {
                "copy": [
                  {
                    "name": "securityRules",
                    "count": "[length(parameters('networkSecurityGroupSecurityRules'))]",
                    "input": {
                      "name": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].name]",
                      "properties": {
                        "access": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.access]",
                        "destinationAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, ''), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix)]",
                        "destinationAddressPrefixes": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes), 0), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes)]",
                        "destinationPortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges), 0), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges)]",
                        "destinationPortRange": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange, ''), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange)]",
                        "direction": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.direction]",
                        "priority": "[int(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.priority)]",
                        "protocol": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.protocol]",
                        "sourceAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, ''), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix)]",
                        "sourcePortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges), 0), null(), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges)]",
                        "sourcePortRange": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRange]"
                      }
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('spokeSubscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('spokeResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "subnets": {
            "value": [
              {
                "name": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'ase-snet')]",
                "addressPrefix": "[parameters('aseSubnetAddressPrefix')]",
                "delegations": [
                  {
                    "name": "Microsoft.Web.hostingEnvironments",
                    "properties": {
                      "serviceName": "Microsoft.Web/hostingEnvironments"
                    }
                  }
                ],
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled",
                "networkSecurityGroupName": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'nsg')]"
              },
              {
                "name": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'mgmtvm-snet')]",
                "addressPrefix": "[parameters('managementVirtualMachineSubnetAddressPrefix')]",
                "delegations": [],
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled",
                "networkSecurityGroupName": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'nsg')]"
              },
              {
                "name": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'appgw-snet')]",
                "addressPrefix": "[parameters('appGwSubnetAddressPrefix')]",
                "delegations": [],
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled",
                "networkSecurityGroupName": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'nsg')]"
              }
            ]
          },
          "udrName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('udr-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "virtualNetworkName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'vnet')]"
          },
          "vNetAddressPrefixes": {
            "value": "[parameters('vNetAddressPrefixes')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "16223770526083234232"
            }
          },
          "parameters": {
            "vNetAddressPrefixes": {
              "type": "array"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "subnets": {
              "type": "array"
            },
            "udrName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-11-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(parameters('subnets'))]",
                    "input": {
                      "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                      "properties": {
                        "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                        "networkSecurityGroup": "[if(empty(parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName), null(), json(format('{{\"id\": \"{0}\"}}', resourceId('Microsoft.Network/networkSecurityGroups', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupName))))]",
                        "delegations": "[parameters('subnets')[copyIndex('subnets')].delegations]",
                        "routeTable": {
                          "id": "[resourceId('Microsoft.Network/routeTables', parameters('udrName'))]"
                        }
                      }
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": "[parameters('vNetAddressPrefixes')]"
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('virtualNetworkName')]"
            },
            "vNetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            },
            "subnets": {
              "type": "array",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2020-11-01').subnets]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('networkSecurityGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('spokeSubscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('udr-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ase-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('spokeResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aseLbMode": {
            "value": "[variables('aseLbMode')]"
          },
          "aseName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'ase')]"
          },
          "aseSubnetName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'ase-snet')]"
          },
          "aseVnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetId.value]"
          },
          "kind": {
            "value": "[variables('aseKind')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "3882165185170193511"
            }
          },
          "parameters": {
            "aseLbMode": {
              "type": "string"
            },
            "aseName": {
              "type": "string"
            },
            "aseSubnetName": {
              "type": "string"
            },
            "aseVnetId": {
              "type": "string"
            },
            "kind": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            }
          },
          "variables": {
            "subnetId": "[format('{0}/Subnets/{1}', parameters('aseVnetId'), parameters('aseSubnetName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/hostingEnvironments",
              "apiVersion": "2021-01-01",
              "name": "[parameters('aseName')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "internalLoadBalancingMode": "[parameters('aseLbMode')]",
                "virtualNetwork": {
                  "id": "[variables('subnetId')]"
                }
              }
            }
          ],
          "outputs": {
            "dnssuffix": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/hostingEnvironments', parameters('aseName')), '2021-01-01').dnsSuffix]"
            },
            "hostingid": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/hostingEnvironments', parameters('aseName'))]"
            },
            "hostingEnvironmentName": {
              "type": "string",
              "value": "[parameters('aseName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('mgmt-vm-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('networkSecurityGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('spokeSubscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('app-serviceplan-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('spokeResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServicePlanName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'app-sp')]"
          },
          "hostingEnvironmentId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('ase-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hostingid.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "17337901227738964316"
            }
          },
          "parameters": {
            "appServicePlanKind": {
              "type": "string",
              "defaultValue": "windows"
            },
            "appServicePlanName": {
              "type": "string"
            },
            "appServicePlanWorkerCount": {
              "type": "int",
              "defaultValue": 3
            },
            "appServicePlanWorkerSize": {
              "type": "int",
              "defaultValue": 6
            },
            "appServicePlanSku": {
              "type": "object",
              "defaultValue": {
                "Name": "I1v2",
                "tier": "IsolatedV2"
              }
            },
            "hostingEnvironmentId": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            }
          },
          "variables": {
            "hostingEnvironmentProfile": {
              "id": "[parameters('hostingEnvironmentId')]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2019-08-01",
              "name": "[parameters('appServicePlanName')]",
              "kind": "[parameters('appServicePlanKind')]",
              "location": "[parameters('location')]",
              "properties": {
                "hostingEnvironmentProfile": "[variables('hostingEnvironmentProfile')]",
                "perSiteScaling": false,
                "reserved": false,
                "targetWorkerCount": "[parameters('appServicePlanWorkerCount')]",
                "targetWorkerSizeId": "[parameters('appServicePlanWorkerSize')]"
              },
              "sku": "[parameters('appServicePlanSku')]"
            }
          ],
          "outputs": {
            "appServicePlanName": {
              "type": "string",
              "value": "[parameters('appServicePlanName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('ase-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('networkSecurityGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('spokeSubscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('private-dns-zone-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('spokeResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aseName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'ase')]"
          },
          "privateDNSZoneName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('ase-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.dnssuffix.value]"
          },
          "virtualNetworkId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.vNetId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "18160596770060948451"
            }
          },
          "parameters": {
            "aseName": {
              "type": "string"
            },
            "privateDNSZoneName": {
              "type": "string"
            },
            "virtualNetworkId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('privateDNSZoneName')]",
              "location": "global",
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateDNSZoneName'), 'vnetLink')]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[parameters('virtualNetworkId')]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDNSZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateDNSZoneName'), '*')]",
              "properties": {
                "ttl": 3600,
                "aRecords": [
                  {
                    "ipv4Address": "[reference(resourceId('Microsoft.Web/hostingEnvironments/configurations', split(format('{0}/networking', parameters('aseName')), '/')[0], split(format('{0}/networking', parameters('aseName')), '/')[1]), '2021-01-15').internalInboundIpAddresses[0]]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDNSZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateDNSZoneName'), '*.scm')]",
              "properties": {
                "ttl": 3600,
                "aRecords": [
                  {
                    "ipv4Address": "[reference(resourceId('Microsoft.Web/hostingEnvironments/configurations', split(format('{0}/networking', parameters('aseName')), '/')[0], split(format('{0}/networking', parameters('aseName')), '/')[1]), '2021-01-15').internalInboundIpAddresses[0]]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDNSZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones/A",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateDNSZoneName'), '@')]",
              "properties": {
                "ttl": 3600,
                "aRecords": [
                  {
                    "ipv4Address": "[reference(resourceId('Microsoft.Web/hostingEnvironments/configurations', split(format('{0}/networking', parameters('aseName')), '/')[0], split(format('{0}/networking', parameters('aseName')), '/')[1]), '2021-01-15').internalInboundIpAddresses[0]]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDNSZoneName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('ase-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('spokeSubscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('web-app-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('spokeResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'web')]"
          },
          "aseName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('ase-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.hostingEnvironmentName.value]"
          },
          "hostingPlanName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('app-serviceplan-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.appServicePlanName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "managedIdentityName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('uami-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.uamiName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "2313361029121772280"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "managedIdentityName": {
              "type": "string"
            },
            "aseName": {
              "type": "string"
            },
            "hostingPlanName": {
              "type": "string"
            },
            "hostingPlanID": {
              "type": "string",
              "defaultValue": "[resourceId('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]"
            },
            "hostingEnvironmentProfile": {
              "type": "string",
              "defaultValue": "[resourceId('Microsoft.Web/hostingEnvironments/', parameters('aseName'))]"
            },
            "httpsEnable": {
              "type": "bool",
              "defaultValue": true
            },
            "appName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-12-01",
              "name": "[parameters('appName')]",
              "location": "[parameters('location')]",
              "tags": {
                "[format('hidden-related:{0}', parameters('hostingPlanID'))]": "empty",
                "displayName": "Website"
              },
              "properties": {
                "serverFarmId": "[parameters('hostingPlanID')]",
                "hostingEnvironmentProfile": "[parameters('hostingEnvironmentProfile')]",
                "httpsOnly": "[parameters('httpsEnable')]"
              },
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]": {}
                }
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('appName'))]",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), 'b24988ac-6180-42a0-ab88-20f7382dd24c', resourceGroup().id)]",
              "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('appName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('ase-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('app-serviceplan-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('networkSecurityGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('spokeSubscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('uami-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('hub-peering-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('spokeResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "existingLocalVirtualNetworkName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "existingRemoteVirtualNetworkName": {
            "value": "[parameters('hubVirtualNetworkName')]"
          },
          "existingRemoteVirtualNetworkResourceGroupName": {
            "value": "[parameters('hubResourceGroup')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "6538878201705092670"
            }
          },
          "parameters": {
            "existingLocalVirtualNetworkName": {
              "type": "string"
            },
            "existingRemoteVirtualNetworkName": {
              "type": "string"
            },
            "existingRemoteVirtualNetworkResourceGroupName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/to-vnet-{1}', parameters('existingLocalVirtualNetworkName'), parameters('existingRemoteVirtualNetworkName'))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId(parameters('existingRemoteVirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('existingRemoteVirtualNetworkName'))]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('spokeSubscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('spoke-peering-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('hubSubscriptionId')]",
      "resourceGroup": "[parameters('hubResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "existingLocalVirtualNetworkName": {
            "value": "[parameters('hubVirtualNetworkName')]"
          },
          "existingRemoteVirtualNetworkName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "existingRemoteVirtualNetworkResourceGroupName": {
            "value": "[parameters('spokeResourceGroup')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "6538878201705092670"
            }
          },
          "parameters": {
            "existingLocalVirtualNetworkName": {
              "type": "string"
            },
            "existingRemoteVirtualNetworkName": {
              "type": "string"
            },
            "existingRemoteVirtualNetworkResourceGroupName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/to-vnet-{1}', parameters('existingLocalVirtualNetworkName'), parameters('existingRemoteVirtualNetworkName'))]",
              "properties": {
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteVirtualNetwork": {
                  "id": "[resourceId(parameters('existingRemoteVirtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('existingRemoteVirtualNetworkName'))]"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('networkSecurityGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('spokeSubscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('hub-peering-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac-sa-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('hubResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('uami-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.uamiPrincipalId.value]"
          },
          "storageAccountResourceId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('hubSubscriptionId'), parameters('hubResourceGroup')), 'Microsoft.Network/azureFirewalls', parameters('hubStorageAccountName'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "12960746169763418225"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "storageAccountResourceId": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionId": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', split(parameters('storageAccountResourceId'), '/')[8])]",
              "name": "[guid(parameters('principalId'), variables('roleDefinitionId'), parameters('storageAccountResourceId'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionId'))]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('uami-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('rbac-kv-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('spokeResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('uami-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.uamiPrincipalId.value]"
          },
          "keyVaultResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultResourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "1976169565169943754"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "keyVaultResourceId": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionIds": [
              "a4417e6f-fecd-4de8-b567-7b0420556985",
              "b86a8fe4-44ce-4948-aee5-eccb2c155cd7"
            ]
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignment",
                "count": "[length(variables('roleDefinitionIds'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', split(parameters('keyVaultResourceId'), '/')[8])]",
              "name": "[guid(parameters('principalId'), variables('roleDefinitionIds')[copyIndex()], parameters('keyVaultResourceId'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionIds')[copyIndex()])]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('uami-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('applicationGateway-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('spokeResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationGatewayName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'gw')]"
          },
          "applicationGatewaySslCertificateName": {
            "value": "[parameters('applicationGatewaySslCertificateName')]"
          },
          "autoScaleMaxCapacity": {
            "value": "[parameters('autoScaleMaxCapacity')]"
          },
          "capacity": {
            "value": "[parameters('capacity')]"
          },
          "cookieBasedAffinity": {
            "value": "[variables('cookieBasedAffinity')]"
          },
          "hostnames": {
            "value": "[variables('hostnames')]"
          },
          "http2Enabled": {
            "value": "[variables('http2Enabled')]"
          },
          "keyVaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "managedIdentityName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('uami-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.uamiName.value]"
          },
          "pickHostNameFromBackendAddress": {
            "value": "[variables('pickHostNameFromBackendAddress')]"
          },
          "port": {
            "value": "[variables('port')]"
          },
          "privateIPAllocationMethod": {
            "value": "[variables('privateIPAllocationMethod')]"
          },
          "protocol": {
            "value": "[variables('protocol')]"
          },
          "publicIpAddressName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'pip')]"
          },
          "publicIPAllocationMethod": {
            "value": "[variables('publicIPAllocationMethod')]"
          },
          "publicIpSku": {
            "value": "[variables('publicIpSku')]"
          },
          "requestRoutingRuleType": {
            "value": "[variables('requestRoutingRuleType')]"
          },
          "requestTimeout": {
            "value": "[variables('requestTimeout')]"
          },
          "requireServerNameIndication": {
            "value": "[variables('requireServerNameIndication')]"
          },
          "resourceGroup": {
            "value": "[parameters('spokeResourceGroup')]"
          },
          "skuName": {
            "value": "[variables('sku')]"
          },
          "subnetName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'appgw-snet')]"
          },
          "subscriptionId": {
            "value": "[parameters('spokeSubscriptionId')]"
          },
          "tier": {
            "value": "[variables('tier')]"
          },
          "virtualNetworkName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.name.value]"
          },
          "webAppFqdn": {
            "value": "[format('{0}.{1}', replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'web'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('ase-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.dnssuffix.value)]"
          },
          "webApplicationFirewall": {
            "value": "[variables('webApplicationFirewall')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "2732114801943107792"
            }
          },
          "parameters": {
            "applicationGatewayName": {
              "type": "string"
            },
            "applicationGatewaySslCertificateName": {
              "type": "string"
            },
            "autoScaleMaxCapacity": {
              "type": "int"
            },
            "capacity": {
              "type": "int"
            },
            "cookieBasedAffinity": {
              "type": "string"
            },
            "hostnames": {
              "type": "array",
              "defaultValue": []
            },
            "http2Enabled": {
              "type": "bool"
            },
            "keyVaultName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "managedIdentityName": {
              "type": "string"
            },
            "pickHostNameFromBackendAddress": {
              "type": "bool"
            },
            "port": {
              "type": "int"
            },
            "privateIPAllocationMethod": {
              "type": "string"
            },
            "protocol": {
              "type": "string"
            },
            "publicIpAddressName": {
              "type": "string"
            },
            "publicIPAllocationMethod": {
              "type": "string"
            },
            "publicIpSku": {
              "type": "string"
            },
            "requestRoutingRuleType": {
              "type": "string"
            },
            "requestTimeout": {
              "type": "int"
            },
            "requireServerNameIndication": {
              "type": "bool"
            },
            "resourceGroup": {
              "type": "string"
            },
            "skuName": {
              "type": "string"
            },
            "subnetName": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "tier": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "webAppFqdn": {
              "type": "string"
            },
            "webApplicationFirewall": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "variables": {
            "frontendIPConfigurationName": "[format('{0}-publicFrontendIp', parameters('applicationGatewayName'))]",
            "frontendPortName": "[format('port_{0}', parameters('port'))]",
            "httpslistenerName": "[format('{0}-https-listener', parameters('applicationGatewayName'))]",
            "backendAddressPoolName": "[format('{0}-backend-pool', parameters('applicationGatewayName'))]",
            "backendHttpSettingsName": "[format('{0}-https-setting', parameters('applicationGatewayName'))]",
            "gatewayIPConfigurationsName": "[format('{0}-gatewayIpConfig', parameters('applicationGatewayName'))]",
            "requestRoutingRulesName": "[format('{0}-https-routingrule', parameters('applicationGatewayName'))]",
            "keyVaultSecretId": "[format('https://{0}{1}/secrets/{2}', parameters('keyVaultName'), environment().suffixes.keyvaultDns, parameters('applicationGatewaySslCertificateName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2021-03-01",
              "name": "[parameters('publicIpAddressName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('publicIpSku')]"
              },
              "properties": {
                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]"
              }
            },
            {
              "type": "Microsoft.Network/applicationGateways",
              "apiVersion": "2020-11-01",
              "name": "[parameters('applicationGatewayName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))]": {}
                }
              },
              "properties": {
                "sku": {
                  "name": "[parameters('skuName')]",
                  "tier": "[parameters('tier')]"
                },
                "gatewayIPConfigurations": [
                  {
                    "name": "[variables('gatewayIPConfigurationsName')]",
                    "properties": {
                      "subnet": {
                        "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]"
                      }
                    }
                  }
                ],
                "sslCertificates": [
                  {
                    "name": "[parameters('applicationGatewaySslCertificateName')]",
                    "properties": {
                      "keyVaultSecretId": "[variables('keyVaultSecretId')]"
                    }
                  }
                ],
                "trustedRootCertificates": [],
                "trustedClientCertificates": [],
                "sslProfiles": [],
                "frontendIPConfigurations": [
                  {
                    "name": "[variables('frontendIPConfigurationName')]",
                    "properties": {
                      "privateIPAllocationMethod": "[parameters('privateIPAllocationMethod')]",
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]"
                      }
                    }
                  }
                ],
                "frontendPorts": [
                  {
                    "name": "[variables('frontendPortName')]",
                    "properties": {
                      "port": "[parameters('port')]"
                    }
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "[variables('backendAddressPoolName')]",
                    "properties": {
                      "backendAddresses": [
                        {
                          "fqdn": "[parameters('webAppFqdn')]"
                        }
                      ]
                    }
                  }
                ],
                "backendHttpSettingsCollection": [
                  {
                    "name": "[variables('backendHttpSettingsName')]",
                    "properties": {
                      "port": "[parameters('port')]",
                      "protocol": "[parameters('protocol')]",
                      "cookieBasedAffinity": "[parameters('cookieBasedAffinity')]",
                      "pickHostNameFromBackendAddress": "[parameters('pickHostNameFromBackendAddress')]",
                      "requestTimeout": "[parameters('requestTimeout')]"
                    }
                  }
                ],
                "httpListeners": [
                  {
                    "name": "[variables('httpslistenerName')]",
                    "properties": {
                      "frontendIPConfiguration": {
                        "id": "[concat(format('/subscriptions/{0}/resourcegroups/{1}/providers/Microsoft.Network/applicationGateways/{2}/frontendIPConfigurations/{3}', parameters('subscriptionId'), parameters('resourceGroup'), parameters('applicationGatewayName'), variables('frontendIPConfigurationName')))]"
                      },
                      "frontendPort": {
                        "id": "[concat(format('/subscriptions/{0}/resourcegroups/{1}/providers/Microsoft.Network/applicationGateways/{2}/frontendPorts/{3}', parameters('subscriptionId'), parameters('resourceGroup'), parameters('applicationGatewayName'), variables('frontendPortName')))]"
                      },
                      "protocol": "[parameters('protocol')]",
                      "sslCertificate": {
                        "id": "[concat(format('/subscriptions/{0}/resourcegroups/{1}/providers/Microsoft.Network/applicationGateways/{2}/sslCertificates/{3}', parameters('subscriptionId'), parameters('resourceGroup'), parameters('applicationGatewayName'), parameters('applicationGatewaySslCertificateName')))]"
                      },
                      "hostNames": "[parameters('hostnames')]",
                      "requireServerNameIndication": "[parameters('requireServerNameIndication')]"
                    }
                  }
                ],
                "urlPathMaps": [],
                "requestRoutingRules": [
                  {
                    "name": "[variables('requestRoutingRulesName')]",
                    "properties": {
                      "ruleType": "[parameters('requestRoutingRuleType')]",
                      "httpListener": {
                        "id": "[concat(format('/subscriptions/{0}/resourcegroups/{1}/providers/Microsoft.Network/applicationGateways/{2}/httpListeners/{3}', parameters('subscriptionId'), parameters('resourceGroup'), parameters('applicationGatewayName'), variables('httpslistenerName')))]"
                      },
                      "backendAddressPool": {
                        "id": "[concat(format('/subscriptions/{0}/resourcegroups/{1}/providers/Microsoft.Network/applicationGateways/{2}/backendAddressPools/{3}', parameters('subscriptionId'), parameters('resourceGroup'), parameters('applicationGatewayName'), variables('backendAddressPoolName')))]"
                      },
                      "backendHttpSettings": {
                        "id": "[concat(format('/subscriptions/{0}/resourcegroups/{1}/providers/Microsoft.Network/applicationGateways/{2}/backendHttpSettingsCollection/{3}', parameters('subscriptionId'), parameters('resourceGroup'), parameters('applicationGatewayName'), variables('backendHttpSettingsName')))]"
                      }
                    }
                  }
                ],
                "probes": [],
                "rewriteRuleSets": [],
                "redirectConfigurations": [],
                "privateLinkConfigurations": [],
                "webApplicationFirewallConfiguration": "[parameters('webApplicationFirewall')]",
                "enableHttp2": "[parameters('http2Enabled')]",
                "autoscaleConfiguration": {
                  "minCapacity": "[parameters('capacity')]",
                  "maxCapacity": "[parameters('autoScaleMaxCapacity')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName'))]"
              ]
            }
          ],
          "outputs": {
            "publicIpAddress": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpAddressName')), '2021-03-01').ipAddress]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('ase-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('mgmt-vm-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('networkSecurityGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('private-dns-zone-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('spokeSubscriptionId'), 'Microsoft.Resources/deployments', format('resourceGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('uami-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('hub-peering-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('dnsZone-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[parameters('spokeSubscriptionId')]",
      "resourceGroup": "[parameters('spokeResourceGroup')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appName": {
            "value": "[replace(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.resourceName.value, '[PH]', 'web')]"
          },
          "dnsZoneName": {
            "value": "[parameters('dnsZoneName')]"
          },
          "location": {
            "value": "Global"
          },
          "publicIpAddress": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('applicationGateway-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.publicIpAddress.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "375408652678369504"
            }
          },
          "parameters": {
            "appName": {
              "type": "string"
            },
            "dnsZoneName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "publicIpAddress": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/dnsZones",
              "apiVersion": "2018-05-01",
              "name": "[parameters('dnsZoneName')]",
              "location": "[parameters('location')]",
              "properties": {
                "zoneType": "Public"
              }
            },
            {
              "type": "Microsoft.Network/dnsZones/A",
              "apiVersion": "2018-05-01",
              "name": "[format('{0}/{1}', parameters('dnsZoneName'), parameters('appName'))]",
              "properties": {
                "TTL": 3600,
                "ARecords": [
                  {
                    "ipv4Address": "[parameters('publicIpAddress')]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/dnsZones', parameters('dnsZoneName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('applicationGateway-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('ase-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('naming-convention-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('networkSecurityGroup-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('private-dns-zone-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('spokeSubscriptionId'), parameters('spokeResourceGroup')), 'Microsoft.Resources/deployments', format('spoke-vnet-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    }
  ]
}